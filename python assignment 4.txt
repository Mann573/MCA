.. code:: ipython3

    '''Write a Python program to get the second largest number from a list.'''
    # Sample list of numbers
    numbers = [12, 45, 89, 24, 50, 7, 61, 38]
    
    # Find the second largest number
    if len(numbers) < 2:
        print("The list doesn't have a second largest number.")
    else:
        largest = second_largest = float('-inf')
    
        for num in numbers:
            if num > largest:
                second_largest = largest
                largest = num
            elif num > second_largest and num != largest:
                second_largest = num
    
        if second_largest == float('-inf'):
            print("There is no second largest number.")
        else:
            print("The second largest number is:", second_largest)
    

.. parsed-literal::

    The second largest number is: 61
    

.. code:: ipython3

    '''Write a program to remove all the duplicate elements from list.'''
    # Sample list with duplicates
    my_list = [1, 2, 2, 3, 4, 4, 5, 6, 6]
    
    # Remove duplicates while preserving the order
    unique_list = []
    for item in my_list:
        if item not in unique_list:
            unique_list.append(item)
    print("Original List:", my_list)
    print("List with Duplicates Removed:", unique_list)


.. parsed-literal::

    Original List: [1, 2, 2, 3, 4, 4, 5, 6, 6]
    List with Duplicates Removed: [1, 2, 3, 4, 5, 6]
    

.. code:: ipython3

    '''Write a Python program to find the list in a list of lists whose sum of elements is the highest.'''
    def find_list_with_highest_sum(list_of_lists):
        max_sum = float('-inf')  # Initialize with negative infinity
        result_list = None
    
        for sub_list in list_of_lists:
            current_sum = sum(sub_list)
            if current_sum > max_sum:
                max_sum = current_sum
                result_list = sub_list
    
        return result_list
    
    # Sample list of lists
    lists = [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10], [11, 12, 13, 14]]
    
    # Find the list with the highest sum
    list_with_highest_sum = find_list_with_highest_sum(lists)
    
    if list_with_highest_sum is not None:
        print("List with the highest sum:", list_with_highest_sum)
        print("Sum of elements:", sum(list_with_highest_sum))
    else:
        print("No lists in the list of lists.")
    


.. parsed-literal::

    List with the highest sum: [11, 12, 13, 14]
    Sum of elements: 50
    

.. code:: ipython3

    '''Write a Python program to concatenate following dictionaries to create a new one.
    d1={1:100, 2:200}
    d2={3:300, 4:400}
    d3={5:500, 6:600}'''
    # Define the input dictionaries
    d1 = {1: 100, 2: 200}
    d2 = {3: 300, 4: 400}
    d3 = {5: 500, 6: 600}
    
    # Create a new dictionary by concatenating the input dictionaries
    concatenated_dict = {}
    concatenated_dict.update(d1)
    concatenated_dict.update(d2)
    concatenated_dict.update(d3)
    
    print("Concatenated Dictionary:", concatenated_dict)
    


.. parsed-literal::

    Concatenated Dictionary: {1: 100, 2: 200, 3: 300, 4: 400, 5: 500, 6: 600}
    

.. code:: ipython3

    '''Write a Python program to check if a given key already exists in a dictionary.'''
    # Sample dictionary
    my_dict = {'a': 1, 'b': 2, 'c': 3}
    key_check = 'b'
    if key_check in my_dict:
        print(f"The key '{key_check}' exists in the dictionary.")
    else:
        print(f"The key '{key_check}' does not exist in the dictionary.")
    


.. parsed-literal::

    The key 'b' exists in the dictionary.
    

.. code:: ipython3

    '''Write a Python program to remove duplicate values from Dictionary.'''
    # Original dictionary with duplicate values
    original_dict = {
        'a': 1,
        'b': 2,
        'c': 1,
        'd': 3,
        'e': 2,
        'f': 4
    }
    # Create a new dictionary with unique values
    unique_dict = {}
    seen_values = set()
    for key, value in original_dict.items():
        if value not in seen_values:
            unique_dict[key] = value
            seen_values.add(value)
    
    print("Original Dictionary:", original_dict)
    print("Dictionary with Duplicate Values Removed:", unique_dict)


.. parsed-literal::

    Original Dictionary: {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2, 'f': 4}
    Dictionary with Duplicate Values Removed: {'a': 1, 'b': 2, 'd': 3, 'f': 4}
    

.. code:: ipython3

    '''Write a Python script to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.'''
    # Create a dictionary with keys as numbers and values as squares of the keys
    squares_dict = {num: num ** 2 for num in range(1, 16)}
    # Print the dictionary
    for key, value in squares_dict.items():
        print(f"{key}: {value}")
    


.. parsed-literal::

    1: 1
    2: 4
    3: 9
    4: 16
    5: 25
    6: 36
    7: 49
    8: 64
    9: 81
    10: 100
    11: 121
    12: 144
    13: 169
    14: 196
    15: 225
    

.. code:: ipython3

    '''Write a program to determine frequency of number in a list of numbers.'''
    def count_frequency(numbers):
        frequency = {}
        for num in numbers:
            if num in frequency:
                frequency[num] += 1
            else:
                frequency[num] = 1
        return frequency
    
    # Sample list of numbers
    numbers = [1, 2, 2, 3, 4, 4, 5, 6, 6, 2, 4]
    
    # Count the frequency of each number in the list
    number_frequency = count_frequency(numbers)
    
    # Print the frequency of each number
    for num, freq in number_frequency.items():
        print(f"{num} appears {freq} times.")


.. parsed-literal::

    1 appears 1 times.
    2 appears 3 times.
    3 appears 1 times.
    4 appears 3 times.
    5 appears 1 times.
    6 appears 2 times.
    

.. code:: ipython3

    '''Write a Python program to find all prime numbers between given range using functions.'''
    def is_prime(num):
        if num <= 1:
            return False
        if num <= 3:
            return True
        if num % 2 == 0 or num % 3 == 0:
            return False
        i = 5
        while i * i <= num:
            if num % i == 0 or num % (i + 2) == 0:
                return False
            i += 6
        return True
    
    def find_prime_numbers(start, end):
        prime_numbers = []
        for number in range(start, end + 1):
            if is_prime(number):
                prime_numbers.append(number)
        return prime_numbers
    
    # Input range from the user
    start_range = int(input("Enter the starting range: "))
    end_range = int(input("Enter the ending range: "))
    
    prime_numbers_in_range = find_prime_numbers(start_range, end_range)
    
    if prime_numbers_in_range:
        print("Prime numbers in the range {} to {}:".format(start_range, end_range))
        for number in prime_numbers_in_range:
            print(number)
    else:
        print("No prime numbers found in the range {} to {}.".format(start_range, end_range))


.. parsed-literal::

    Enter the starting range:  1
    Enter the ending range:  50
    

.. parsed-literal::

    Prime numbers in the range 1 to 50:
    2
    3
    5
    7
    11
    13
    17
    19
    23
    29
    31
    37
    41
    43
    47
    

.. code:: ipython3

    '''Write a Python program to print all Armstrong numbers between given range using functions.'''
    def is_armstrong_number(num):
        num_str = str(num)
        power = len(num_str)
        sum_of_powers = sum(int(digit) ** power for digit in num_str)
        return num == sum_of_powers
    
    def find_armstrong_numbers(start, end):
        armstrong_numbers = []
        for number in range(start, end + 1):
            if is_armstrong_number(number):
                armstrong_numbers.append(number)
        return armstrong_numbers
    
    # Input range from the user
    start_range = int(input("Enter the starting range: "))
    end_range = int(input("Enter the ending range: "))
    
    armstrong_numbers_in_range = find_armstrong_numbers(start_range, end_range)
    
    if armstrong_numbers_in_range:
        print("Armstrong numbers in the range {} to {}:".format(start_range, end_range))
        for number in armstrong_numbers_in_range:
            print(number)
    else:
        print("No Armstrong numbers found in the range {} to {}.".format(start_range, end_range))


.. parsed-literal::

    Enter the starting range:  1
    Enter the ending range:  100
    

.. parsed-literal::

    Armstrong numbers in the range 1 to 100:
    1
    2
    3
    4
    5
    6
    7
    8
    9
    

.. code:: ipython3

    '''Write a Python program to print all perfect numbers between given range using functions.
    [ perfect number is a positive integer that is equal to the sum of its positive divisor, excluding the number itself example 6 3+2+1= 6]'''
    
    def is_perfect_number(num):
        divisors = [1]  # Start with 1 as a divisor
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                divisors.extend([i, num // i])
        return num == sum(divisors)
    
    def find_perfect_numbers(start, end):
        perfect_numbers = []
        for number in range(start, end + 1):
            if is_perfect_number(number):
                perfect_numbers.append(number)
        return perfect_numbers
    
    start_range = int(input("Enter the starting range: "))
    end_range = int(input("Enter the ending range: "))
    
    perfect_numbers_in_range = find_perfect_numbers(start_range, end_range)
    
    if perfect_numbers_in_range:
        print("Perfect numbers in the range {} to {}:".format(start_range, end_range))
        for number in perfect_numbers_in_range:
            print(number)
    else:
        print("No perfect numbers found in the range {} to {}.".format(start_range, end_range))


.. parsed-literal::

    Enter the starting range:  1
    Enter the ending range:  100
    

.. parsed-literal::

    Perfect numbers in the range 1 to 100:
    1
    6
    28
    

.. code:: ipython3

    '''Write a python program to find twin prime numbers up to a range.
    [ex 3,5 5,6 11,13 17,19 41,43 ] all are twin prime their number difference is 1'''
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True
    def find_twin_primes(limit):
        twin_primes = []
        for num in range(2, limit):
            if is_prime(num) and is_prime(num + 2):
                twin_primes.append((num, num + 2))
        return twin_primes
    range_limit = int(input("Enter the range to find twin prime numbers: "))
    twin_prime_numbers = find_twin_primes(range_limit)
    print("Twin Prime Numbers up to", range_limit, "are:")
    for twin_prime in twin_prime_numbers:
        print(twin_prime[0], ",", twin_prime[1])


.. parsed-literal::

    Enter the range to find twin prime numbers:  50
    

.. parsed-literal::

    Twin Prime Numbers up to 50 are:
    3 , 5
    5 , 7
    11 , 13
    17 , 19
    29 , 31
    41 , 43
    

.. code:: ipython3

    '''Write a Python program to sort a list of tuples using Lambda.
    Original list of tuple:- [('English',88),('Science',90),('Maths',97),('Socialsciences',82)]
    Resultant tuple:- [('Social sciences', 60), ('English', 70), ('Science', 77), ('Maths', 95)]'''
     
    original_list = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]
    sorted_list = sorted(original_list, key=lambda x: x[1], reverse=True)
    print("Resultant tuple:")
    print(sorted_list)


.. parsed-literal::

    Resultant tuple:
    [('Maths', 97), ('Science', 90), ('English', 88), ('Social sciences', 82)]
    

.. code:: ipython3

    '''Write a Python program to filter a list of integers using Lambda
    Original list of numbers:-
    [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10]
    Result:-
    Even number list:-
    [2 , 4 , 6 , 8 , 10]
    Odd number List:-
    [1 , 3 , 5 , 7 , 9]'''
    
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
    odd_numbers = list(filter(lambda x: x % 2 != 0, numbers))
    print("Even number list:", even_numbers)
    print("Odd number list:", odd_numbers)


.. parsed-literal::

    Even number list: [2, 4, 6, 8, 10]
    Odd number list: [1, 3, 5, 7, 9]
    

.. code:: ipython3

    '''Write a program to sort a given list of names. (Use sort() method of list)'''
    names = ['Priyank', 'Urjit', 'Vivek', 'Kunal', 'Hardik']
    names.sort()
    print("Sorted List of Names:", names)


.. parsed-literal::

    Sorted List of Names: ['108', '11', '32', '6', '64', '78']
    

.. code:: ipython3

    '''Write a program to merge two given sorted lists of names into single sorted list of names.'''
    list1 = ['Priyank', 'Urjit', 'Vivek', 'Kunal', 'Hardik']
    list2 = ['Harsh', 'Sahil', 'Harshil', 'Sachin', 'Rahul']
    merged_list = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            merged_list.append(list1[i])
            i += 1
        else:
            merged_list.append(list2[j])
            j += 1
    merged_list.extend(list1[i:])
    merged_list.extend(list2[j:])
    print("Merged and Sorted List:", merged_list)


.. parsed-literal::

    Merged and Sorted List: ['Harsh', 'Priyank', 'Sahil', 'Harshil', 'Sachin', 'Rahul', 'Urjit', 'Vivek', 'Kunal', 'Hardik']
    

.. code:: ipython3

    '''Write a program to remove the duplicates from a list.'''
    my_list = [1, 2, 2, 3, 4, 4, 5, 6, 6]
    unique_list = list(set(my_list))
    print("Original List:", my_list)
    print("List with Duplicates Removed:", unique_list)

.. code:: ipython3

    '''Write a program to find the maximum number in the list.'''
    numbers = [12, 45, 89, 24, 50, 7, 61, 38]
    maximum = max(numbers)
    print("The maximum number in the list is:", maximum)

.. code:: ipython3

    '''Write a program to enter key and value for message according the key print the message.'''
    # Create an empty dictionary to store key-value pairs
    message_dict = {}
    
    # Function to enter a new message
    def enter_message():
        key = input("Enter the key for the message: ")
        value = input("Enter the message: ")
        message_dict[key] = value
    
    # Function to retrieve and print a message
    def print_message():
        key = input("Enter the key to retrieve the message: ")
        if key in message_dict:
            print("Message:", message_dict[key])
        else:
            print("Key not found. Please enter a valid key.")
    
    while True:
        print("\nOptions:")
        print("1. Enter a new message")
        print("2. Retrieve and print a message")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ")
        
        if choice == '1':
            enter_message()
        elif choice == '2':
            print_message()
        elif choice == '3':
            break
        else:
            print("Invalid choice. Please enter 1, 2, or 3")
    print("Program exited.")


.. parsed-literal::

    
    Options:
    1. Enter a new message
    2. Retrieve and print a message
    3. Exit
    

.. parsed-literal::

    Enter your choice (1/2/3):  3
    

.. parsed-literal::

    Program exited.
    

.. code:: ipython3

    '''Write a program to demonstrate different set operation in python.'''
    # Define two sample sets
    set1 = {1, 2, 3, 4, 5}
    set2 = {3, 4, 5, 6, 7}
    
    # Union: Elements that are in either set1 or set2 or both
    union_result = set1.union(set2)
    print("Union:", union_result)
    
    # Intersection: Elements that are in both set1 and set2
    intersection_result = set1.intersection(set2)
    print("Intersection:", intersection_result)
    
    # Difference: Elements that are in set1 but not in set2
    difference_result = set1.difference(set2)
    print("Difference (set1 - set2):", difference_result)
    
    # Symmetric Difference: Elements that are in either set1 or set2, but not in both
    symmetric_difference_result = set1.symmetric_difference(set2)
    print("Symmetric Difference:", symmetric_difference_result)
    
    # Check if set2 is a subset of set1
    is_subset = set2.issubset(set1)
    print("Is set2 a subset of set1?", is_subset)
    
    # Check if set1 is a superset of set2
    is_superset = set1.issuperset(set2)
    print("Is set1 a superset of set2?", is_superset)
    
    # Add an element to set1
    set1.add(6)
    print("Add an element to set1:", set1)
    
    # Remove an element from set2
    set2.remove(7)
    print("Remove an element from set2:", set2)
    


.. parsed-literal::

    Union: {1, 2, 3, 4, 5, 6, 7}
    Intersection: {3, 4, 5}
    Difference (set1 - set2): {1, 2}
    Symmetric Difference: {1, 2, 6, 7}
    Is set2 a subset of set1? False
    Is set1 a superset of set2? False
    Add an element to set1: {1, 2, 3, 4, 5, 6}
    Remove an element from set2: {3, 4, 5, 6}
    

.. code:: ipython3

    '''Write a Python program to generate nth Fibonacci term using function.'''
    def fibonacci(n):
        if n <= 0:
            return "Invalid input. Please enter a positive integer."
        elif n == 1:
            return 0
        elif n == 2:
            return 1
        else:
            a, b = 0, 1
            for _ in range(2, n):
                a, b = b, a + b
            return b
    n = int(input("Enter the value of n: "))
    result = fibonacci(n)
    if isinstance(result, int):
        print(f"The {n}th Fibonacci term is: {result}")
    else:
        print(result)


.. parsed-literal::

    Enter the value of n:  10
    

.. parsed-literal::

    The {n}th Fibonacci term is: {result}
    

.. code:: ipython3

    '''Write a program that send a list to the function and determine the odd and even numbers from the list.'''
    def find_odd_even(numbers):
        even_numbers = []
        odd_numbers = []
        for number in numbers:
            if number % 2 == 0:
                even_numbers.append(number)
            else:
                odd_numbers.append(number)
        return even_numbers, odd_numbers
    number_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    even, odd = find_odd_even(number_list)
    print("Even numbers:", even)
    print("Odd numbers:", odd)


.. parsed-literal::

    Even numbers: [2, 4, 6, 8, 10]
    Odd numbers: [1, 3, 5, 7, 9]
    

.. code:: ipython3

    '''Write a Python script to sort (ascending and descending) a dictionary by value.'''
    sample_dict = {'a': 10, 'b': 30, 'c': 20, 'd': 5}
    sorted_dict_ascending = dict(sorted(sample_dict.items(), key=lambda item: item[1]))
    sorted_dict_descending = dict(sorted(sample_dict.items(), key=lambda item: item[1], reverse=True))
    print("Ascending Sort:", sorted_dict_ascending)
    print("Descending Sort:", sorted_dict_descending)

.. code:: ipython3

    '''Write a Python script to add a key to a dictionary.
    Sample Dictionary : {0: 10, 1: 20}
    Expected Result : {0: 10, 1: 20, 2: 30}'''
    sample_dict = {0: 10, 1: 20}
    sample_dict[2] = 30
    print(sample_dict)


.. parsed-literal::

    {0: 10, 1: 20, 2: 30}
    

.. code:: ipython3

    '''Write a Python script to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x).
    Sample Dictionary ( n = 5) :
    Expected Output : {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}'''
    n = 5
    result_dict = {x: x * x for x in range(1, n + 1)}
    print(result_dict)


.. parsed-literal::

    {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
    

.. code:: ipython3

    '''Write a Python program to sum all the items in a dictionary.'''
    my_dict = {
        'a':10,
        'b':20,
        'c':30,
        'd':40,
    }
    total=sum(my_dict.values())
    print(total)


.. parsed-literal::

    100
    

.. code:: ipython3

    '''Write a Python program to combine two dictionary by adding values for common keys.
    d1 = {'a': 100, 'b': 200, 'c':300}
    d2 = {'a': 300, 'b': 200, 'd':400}
    Sample output: Counter({'a': 400, 'b': 400, 'd': 400, 'c': 300})
    from collections import Counter'''
    
    d1 = {'a': 100, 'b': 200, 'c': 300}
    d2 = {'a': 300, 'b': 200, 'd': 400}
    
    # Combine the dictionaries by adding values for common keys
    result = Counter(d1) + Counter(d2)
    print(result)
    


.. parsed-literal::

    Counter({'a': 400, 'b': 400, 'd': 400, 'c': 300})
    

.. code:: ipython3

    '''Write a Python program to print all distinct values in a dictionary.
    Sample Data : [{"V":"S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"}, {"VII":"S005"}, {"V":"S009"},{"VIII":"S007"}]
    Expected Output : Unique Values: {'S005', 'S002', 'S007', 'S001', 'S009'}'''
    
    data = [
        {"V": "S001"},
        {"V": "S002"},
        {"VI": "S001"},
        {"VI": "S005"},
        {"VII": "S005"},
        {"V": "S009"},
        {"VIII": "S007"}
    ]
    
    unique_values = set()  # Create a set to store unique values
    
    # Iterate through the dictionaries and collect unique values
    for d in data:
        for value in d.values():
            unique_values.add(value)
    
    print("Unique Values:", unique_values)
    


.. parsed-literal::

    Unique Values: {'S001', 'S007', 'S002', 'S005', 'S009'}
    

.. code:: ipython3

    '''Write a Python program to create and display all combinations of letters, selecting each letter from a different key in a dictionary.
    Sample data : {'1':['a','b'], '2':['c','d']}
    Expected Output:
    ac
    ad
    bc
    bd'''
    
    data = {'1': ['a', 'b'], '2': ['c', 'd']}
    
    combinations = []
    
    # Nested loop to generate combinations
    for letter1 in data['1']:
        for letter2 in data['2']:
            combination = letter1 + letter2
            combinations.append(combination)
    
    # Display the combinations
    for combination in combinations:
        print(combination)


.. parsed-literal::

    ac
    ad
    bc
    bd
    

.. code:: ipython3

    #convertind two lists into list. 
    keys = ["a", "b", "c"]
    values = [1, 2, 3]
    my_dict = dict(zip(keys, values))
    print(my_dict)


.. parsed-literal::

    {'a': 1, 'b': 2, 'c': 3}
    

.. code:: ipython3

    '''Print the value of key ‘history’ from the below dict
    sampleDict = {
        "class": {
            "student": {
                "name": "Mike",
                "marks": {
                    "physics": 70,
                    "history": 80
                }
            }
        }
    }
    '''
    
    sampleDict = {
        "class": 
        {
            "student": 
            {
                "name": "Mike",
                "marks": 
                {
                    "physics": 70,
                    "history": 80,
                }
            }
        }
    }
    
    # Access the value of the 'history' key
    history_score = sampleDict["class"]["student"]["marks"]["history"]
    
    print("History score:", history_score)
    


.. parsed-literal::

    History score: 80
    

.. code:: ipython3

    '''Write a Python program to create a new dictionary by extracting the mentioned keys from the below dictionary.
    
    Given dictionary:
    
    sample_dict = {
        "name": "Kelly",
        "age": 25,
        "salary": 8000,
        "city": "New york"}
    
    # Keys to extract
    keys = ["name", "salary"]
    
    Expected output:
    
    {'name': 'Kelly', 'salary': 8000}
    '''
    
    sample_dict = {
        "name": "Kelly",
        "age": 25,
        "salary": 8000,
        "city": "New York"
    }
    
    keys = ["name", "salary"]
    
    # Create a new dictionary by extracting the specified keys
    extracted_dict = {key: sample_dict[key] for key in keys }
    
    print(extracted_dict)
    


.. parsed-literal::

    {'name': 'Kelly', 'salary': 8000}
    